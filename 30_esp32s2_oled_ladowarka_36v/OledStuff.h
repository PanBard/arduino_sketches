#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h> // by Adafruit
#include <Wire.h>  //for custom sda, scl define

//--- oled
#define I2C_SDA 37  // sda
#define I2C_SCL 35  // scl
//--- oled

// OLED setup ---------------------
Adafruit_SSD1306 display(128, 64, &Wire, -1);  // On ESP32 s2 mini:   pin1=(SDA),  pin2=(SCL); VCC=3.3v; Reset pin # (or -1 if sharing Arduino reset pin)
// OLED setup ---------------------
bool is_oled_working;
float v = 0;
void oled_display(String message) {
  display.clearDisplay();                           // Clear display buffer
  display.setTextSize(1);                           // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(1, 1);
  display.println(message);
  display.display();  // Update screen
}



void oled_display_content(float voltage_switch, float charge_baterry_voltage_level_detection, float charge_baterry_voltage_level_end, int time, bool charge_end) 
{
  display.clearDisplay();                           // Clear display buffer
  display.setTextColor(SSD1306_WHITE);

if(voltage_switch > charge_baterry_voltage_level_detection &&  charge_end == false)
{
  display.setTextSize(2);    
  display.setCursor(35, 1);
  display.println(voltage_switch,1);
  display.setCursor(90, 1);
  display.println('v');

  display.setTextSize(2);                           // Draw 2X-scale text
  display.setCursor(5, 23);
  display.println("LADOWANIE");
  display.setTextSize(1);
  display.setCursor(1, 45);
  display.print("Czas: ");
  display.print(String(time/3600)+F("h "));
  display.print(String((time%3600)/60)+F("m "));
  display.print(String(time%60)+F("s"));
  // display.println("Czas:");
  // display.setCursor(30, 40);
  // display.println(time);
  // display.setCursor(40, 40);
  // display.println('s');
}
else if(voltage_switch >= charge_baterry_voltage_level_end || charge_end == true)
{
  display.setTextSize(2);    
  display.setCursor(35, 1);
  display.println(voltage_switch,1);
  display.setCursor(90, 1);
  display.println('v');

  display.setTextSize(2);                           // Draw 2X-scale text
  display.setCursor(3, 23);
  display.println("NALADOWANA");
  display.setTextSize(1);
  display.setCursor(1, 45);
  display.print("Czas: ");
  display.print(String(time/3600)+F("h "));
  display.print(String((time%3600)/60)+F("m "));
  display.print(String(time%60)+F("s"));
  // display.println("Czas:");
  // display.setCursor(30, 40);
  // display.println(time);
  // display.setCursor(40, 40);
  // display.println('s');
}
else if( voltage_switch < charge_baterry_voltage_level_detection )
{
  display.setTextSize(1);                           // Draw 2X-scale text
  display.setCursor(1, 23);
  display.println("Nie wykryto baterii!");
  // display.setCursor(50, 23);
  // display.println(voltage_switch,1);
  // display.setCursor(70, 23);
  // display.println('v');
}

  // display.setCursor(1, 20);
  // display.println("general:");
  // display.setCursor(50, 20);
  // display.println(analog_value_general);

  // display.setCursor(1, 40);
  // display.println("switch:");
  // display.setCursor(50, 40);
  // display.println(analog_value_switch);



  display.display();  // Update screen
}

const unsigned char Autobot_logo_v2[] PROGMEM = {
  0x00, 0x03, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x1f, 0xf0, 0x00, 0x00, 
	0xff, 0x9f, 0x00, 0x00, 0x00, 0x3f, 0x1f, 0xf0, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x03, 0xdf, 0xf0, 
	0xc0, 0xa0, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x30, 0xc0, 0xb0, 0x01, 0xff, 0xf0, 0x00, 0xf0, 0x30, 
	0xc0, 0xf0, 0x07, 0xff, 0xfc, 0x00, 0xb0, 0x30, 0xc0, 0xf0, 0x01, 0x80, 0x38, 0x00, 0xa0, 0x30, 
	0xc0, 0x58, 0x00, 0xe0, 0xe0, 0x01, 0xe0, 0x20, 0xc0, 0x6e, 0x00, 0x31, 0xc0, 0x0f, 0x60, 0x60, 
	0xe4, 0x7b, 0x80, 0x1f, 0x00, 0x3d, 0xc0, 0x60, 0xe7, 0x9e, 0xf0, 0x06, 0x00, 0xf7, 0x00, 0x60, 
	0xe5, 0xe3, 0xbc, 0x00, 0x07, 0x9c, 0x1e, 0x60, 0x27, 0xb8, 0xef, 0x00, 0x1e, 0x70, 0xfe, 0x40, 
	0x21, 0xef, 0x3b, 0xc0, 0x7b, 0xc3, 0xde, 0xc0, 0x30, 0x3b, 0xcc, 0xf3, 0xc7, 0x1e, 0xf8, 0xc0, 
	0x33, 0x0f, 0x76, 0x9f, 0x2c, 0xfb, 0xc0, 0xc0, 0x33, 0xc3, 0xd6, 0xe5, 0xed, 0xdf, 0x18, 0xc0, 
	0x13, 0x78, 0x76, 0xbf, 0xe9, 0xf8, 0xf8, 0x80, 0x11, 0xfe, 0x12, 0xce, 0x78, 0xc7, 0xd9, 0x80, 
	0x10, 0x7b, 0xc2, 0xc0, 0x78, 0x1e, 0xf1, 0x80, 0x18, 0x0f, 0xf3, 0xc0, 0x58, 0xff, 0xc1, 0x80, 
	0x0c, 0x03, 0xdb, 0x40, 0x5b, 0xde, 0x03, 0x00, 0x07, 0x00, 0xfb, 0x40, 0xd6, 0xf8, 0x07, 0x00, 
	0x09, 0x80, 0x19, 0x60, 0xd7, 0xc0, 0x1c, 0x00, 0x0e, 0xe0, 0x01, 0x60, 0xf3, 0x00, 0x77, 0x00, 
	0x0b, 0xbf, 0xff, 0xe0, 0xf0, 0xff, 0xef, 0x00, 0x09, 0xdf, 0xff, 0xe0, 0xbf, 0xff, 0xbb, 0x00, 
	0x08, 0xc0, 0x00, 0x60, 0xc0, 0x00, 0x73, 0x00, 0x08, 0xc0, 0x00, 0x60, 0xc0, 0x00, 0x62, 0x00, 
	0x0c, 0x40, 0x00, 0x60, 0xc0, 0x00, 0x62, 0x00, 0x0c, 0x40, 0x00, 0x60, 0xc0, 0x00, 0x42, 0x00, 
	0x0c, 0x70, 0x03, 0x60, 0xb0, 0x01, 0xc6, 0x00, 0x0c, 0x1c, 0x07, 0xe0, 0xb8, 0x03, 0x86, 0x00, 
	0x0c, 0x0e, 0x0d, 0xe0, 0xbe, 0x0e, 0x06, 0x00, 0x0c, 0x03, 0x99, 0xe0, 0xb7, 0x3c, 0x06, 0x00, 
	0x0c, 0x01, 0xf1, 0xe0, 0xb1, 0x70, 0x06, 0x00, 0x0c, 0x00, 0xf1, 0xe0, 0xb1, 0x60, 0x06, 0x00, 
	0x0c, 0x00, 0xf1, 0xe0, 0xb1, 0x60, 0x06, 0x00, 0x04, 0x00, 0xf1, 0xe0, 0xb1, 0x60, 0x06, 0x00, 
	0x04, 0x00, 0xf1, 0xe0, 0xb1, 0x60, 0x06, 0x00, 0x04, 0x00, 0xf1, 0xe0, 0xb1, 0x60, 0x06, 0x00, 
	0x04, 0x00, 0xf1, 0xe0, 0xb1, 0x60, 0x04, 0x00, 0x04, 0x00, 0xf1, 0xe0, 0xb1, 0x60, 0x04, 0x00, 
	0x04, 0x00, 0xf1, 0xff, 0xb1, 0x60, 0x0c, 0x00, 0x06, 0x00, 0xf1, 0xff, 0xf1, 0x60, 0x0c, 0x00, 
	0x06, 0x00, 0xf1, 0xff, 0xf1, 0x60, 0x0c, 0x00, 0x06, 0x00, 0xf0, 0x00, 0x01, 0x60, 0x0c, 0x00, 
	0x06, 0x00, 0xf0, 0x06, 0x01, 0x60, 0x0c, 0x00, 0x06, 0x00, 0xf1, 0xff, 0xe1, 0x60, 0x0c, 0x00, 
	0x06, 0x00, 0xf1, 0x7f, 0xb1, 0x60, 0x0c, 0x00, 0x03, 0x80, 0xf3, 0xff, 0xf1, 0x60, 0x1c, 0x00, 
	0x01, 0xf0, 0xf3, 0xc0, 0x51, 0x60, 0x78, 0x00, 0x00, 0x7c, 0xb2, 0x80, 0x59, 0x63, 0xe0, 0x00, 
	0x00, 0x1e, 0xb7, 0x80, 0x79, 0x6f, 0x80, 0x00, 0x00, 0x07, 0xb7, 0x80, 0x69, 0x7e, 0x00, 0x00, 
	0x00, 0x01, 0xb5, 0x80, 0x2f, 0x70, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x3f, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0x7f, 0xf6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x00

};


void displayTransformersLogo_v2() {
  display.clearDisplay();
  display.drawBitmap(30, 0, Autobot_logo_v2, 60, 60, 1);  //(x,y,bitmap_name,width,height,1)
  display.display();
  delay(1000);
};

void oled_start() {
  Wire.begin(I2C_SDA, I2C_SCL);                      //Wire.begin(I2C_SDA, I2C_SCL);
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) //See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
  {  
    // Serial.println(F("SSD1306 allocation failed"));
    is_oled_working = false;
    // for (;;);  // Don't proceed, loop forever
  }
  else
  {
    is_oled_working = true;
    // Serial.println("oled display status: ok");
    display.clearDisplay();
    displayTransformersLogo_v2();

  }
}